name: build

on: [push]

jobs:
  build-macos:
      runs-on: macos-latest

      steps:
        - name: Checkout
          uses: actions/checkout@v2
          with:
            submodules: recursive

        
        - name: Import Code-Signing Certificates
          uses: figleafteam/import-codesign-certs@v2
          with:
            p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
            p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

        # Building the project
        - name: Building Ofelia
          run: ${{github.workspace}}/Resources/build.sh

        # Sign and notarise to make sure it works with gatekeeper
        - name: Sign and notarise
          run: ${{github.workspace}}/.github/scripts/macOS-sign-and-notarise.sh
          working-directory: ${{github.workspace}}
          env:
            AC_USERNAME: ${{ secrets.AC_USERNAME }}
            AC_PASSWORD: ${{ secrets.AC_PASSWORD }}

        # Upload executable binaries to GitHub
        - name: Uploading artifacts
          uses: actions/upload-artifact@v2
          with:
            name: plugdata-ofelia-macos
            path: ${{github.workspace}}/ofelia.zip

  build-ubuntu-old:
    runs-on: ubuntu-20.04
    steps:
      - name: Update git
        run: sudo apt update && sudo apt install -y git

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Installing openFrameworks dependencies
        run: ${{github.workspace}}/Resources/scripts/linux-install-libs.sh

      # Building the project
      - name: Building Ofelia
        run: ${{github.workspace}}/Resources/build.sh

     # Run script that copies all non-system dynamic libraries, and copies them into a dir that gets added as rpath
     # This should ensure that ofelia runs on any Linux distro, it's basically a flatpak
      - name: Packaging dependencies
        run: ${{github.workspace}}/Resources/scripts/linux-bundle-libs.sh

      # Upload executable binaries to GitHub
      - name: Uploading artifacts
        uses: actions/upload-artifact@v2
        with:
          name: plugdata-ofelia-linux-old
          path: ${{github.workspace}}/ofelia

  build-ubuntu-new:
    runs-on: ubuntu-22.04
    steps:
      - name: Update git
        run: sudo apt update && sudo apt install -y git

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Installing openFrameworks dependencies
        run: ${{github.workspace}}/Resources/scripts/linux-install-libs.sh

      # Building the project
      - name: Building Ofelia
        run: ${{github.workspace}}/Resources/build.sh

     # Run script that copies all non-system dynamic libraries, and copies them into a dir that gets added as rpath
     # This should ensure that ofelia runs on any Linux distro, it's basically a flatpak
      - name: Packaging dependencies
        run: ${{github.workspace}}/Resources/scripts/linux-bundle-libs.sh

      # Upload executable binaries to GitHub
      - name: Uploading artifacts
        uses: actions/upload-artifact@v2
        with:
          name: plugdata-ofelia-linux-new
          path: ${{github.workspace}}/ofelia

  build-windows:
      runs-on: windows-latest
      steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install wget
        run: |
          choco install wget -y

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            git
            unzip
            rsync
            wget
            
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Build
        working-directory: ${{github.workspace}}
        run: ${{github.workspace}}/Resources/build.bat

      # Upload executable binaries to GitHub
      - name: Uploading artifacts
        uses: actions/upload-artifact@v2
        with:
          name: plugdata-ofelia-windows
          path: ${{github.workspace}}/ofelia


  #  build-ubuntu-armv7:
  #    runs-on: ubuntu-20.04
  #    name: build-ubuntu-armv7
  #    steps:
  #
  #      - name: Checkout
  #        uses: actions/checkout@v2
  #        with:
  #          submodules: recursive
  #
  #      - uses: actions/checkout@v3
  #      - uses: uraimo/run-on-arch-action@v2
  #        name: Run commands
  #        id: runcmd
  #        with:
  #          arch: armv7
  #          distro: ubuntu20.04
  #
  #          # Mount the artifacts directory as /artifacts in the container
  #          dockerRunArgs: |
  #            --volume "${PWD}:/plugdata-ofelia"
  #
  #          # Set an output parameter `uname` for use in subsequent steps
  #          run: |
  #             apt update && DEBIAN_FRONTEND=noninteractive TZ="Europe/Amsterdam" apt install -y apt-utils sudo libunwind-dev clang git build-essential pkg-config wget rsync libassimp-dev libgstreamer1.0-0 gstreamer1.0-plugins-base libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-bad gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly libfreetype6-dev libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libglu1-mesa-dev mesa-common-dev libcairo-dev lsb-release
  #             cd /plugdata-ofelia
  #             ./.github/scripts/install-libs.sh
  #             ./build.sh
  #
  #      # Upload executable binaries to GitHub
  #      - name: Uploading artifacts
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: plugdata-ofelia-linux-arm
  #          path: ./ofelia
